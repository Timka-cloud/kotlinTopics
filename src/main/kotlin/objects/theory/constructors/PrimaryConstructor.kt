package objects.theory.constructors

/*
Основные отличия конструкторов Kotlin от Java-подобных языков:
– требуется меньше кода
– более строгий подход – все обязательные переменные должны иметь значения


в Kotlin различают:

1) primary constructor – один – (первичный конструктор) – ПК (сокращение для удобства)
    – указывается сразу при описании класса только 1 раз
    – в нем обычно перечислены те переменные, которые обязательно должны быть заполнены (по логике работы объекта)

2) secondary constructors – может быть несколько (вторичные конструкторы) – ВК (сокращение для удобства)
    – указываются внутри класса в любом количестве
    – часто это необязательные, доп. переменные, без которых объект может корректно работать

Важно! Любой ВК должен вызывать ПК либо напрямую, либо через другой ВК (чтобы цепочка вызовов привела в ПК) – иначе при запуске приложения выйдет ошибка “Primary constructor call expected”

Если явно не создавать ПК, тогда автоматически создается пустой

Переменная внутри класса – это свойство (или характеристика) класса (объект)

Нельзя оставлять переменные (свойства) пустыми (компилятор будет подсказывать, что нужна инициализация)


Ключевое слово “this” (как и в Java) – ссылка на конкретный (текущий или любой внешний) объект, к которому хотим обратиться
 */

fun main() {
    var john = John(12, "John", "1 street")

    john.name = "Aaa"
    // john.address = "asdds" // cannot be resigned because it's val

    var jack = Jack()
    println(jack.name) // default value

    var jack2 = Jack("Jack")
    println(jack2.name)

    // Для доступа к свойствам объекта – мы просто к ним обращаемся (не обязательно исп. get/set как в Java)
}


class EmptyPerson() { // automatically create primary constructor

}

// если перед именем указан var или val, то автоматически в классе создается переменная/константа name
class John constructor(
        var age: Int,
        var name: String,
        val address: String
) { // val - будет иметь только одно значение, нельзя присвоить потом другое значение


}

// слово "constructor" можно отпустить,если перед ним нет анотаций, модификаторов
class JohnAnalog (var name: String) {

}

// параметры конструктора могут иметь значения по-умолчанию, которые можно переопределить при создании обьекта
class Jack(var name: String = "default jack name") {

}